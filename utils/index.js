// Generated by CoffeeScript 1.12.6
(function() {
  var CACHE_TIME, CACHE_TIMEG, CACHE_TIMER, CACHE_TIMES, CACHE_TIMESR, CACHE_TIMET, PER_PENALTY, crypto, path;

  path = require('path');

  crypto = require('crypto');

  exports.login = function(req, res, user) {
    return req.session.user = {
      id: user.id,
      nickname: user.nickname,
      username: user.username
    };
  };

  exports.getUser = function(name) {
    var User;
    User = global.db.models.user;
    return User.find({
      where: {
        username: name
      }
    }).then(function(r) {
      return r;
    });
  };

  exports.getExamUser = function(name) {
    var ExamUser;
    ExamUser = global.db.models.exam_user;
    return ExamUser.find({
      where: {
        username: name
      }
    }).then(function(r) {
      return r;
    });
  };

  exports.tmp = function(req, id) {
    req.session.tmpid = id;
    return req.session.save();
  };

  exports.logout = function(req) {
    return delete req.session.user;
  };

  exports.thirdLogin = function(thirdUsername) {
    var User;
    User = global.db.models.user;
    return User.find({
      where: {
        username: thirdUsername
      }
    }).then(function(users) {
      return users;
    });
  };

  exports.getIP = function(req) {
    var ip;
    ip = req.headers['x-real-ip'] || req.headers['x-forwarded-for'] || req.socket.remoteAddress || '';
    return ip;
  };

  exports.findGroupsID = function(user) {
    var Membership;
    Membership = global.db.models.membership;
    return global.db.Promise.resolve().then(function() {
      if (!user) {
        return [];
      }
      return Membership.findAll({
        where: {
          user_id: user.id,
          access_level: ['member', 'admin', 'owner']
        },
        attributes: ['group_id']
      });
    }).then(function(memberships) {
      var membership;
      return (function() {
        var j, len, results1;
        results1 = [];
        for (j = 0, len = memberships.length; j < len; j++) {
          membership = memberships[j];
          results1.push(membership.group_id);
        }
        return results1;
      })();
    });
  };

  exports.findGroups = function(user, include) {
    var Group, myUtils;
    Group = global.db.models.group;
    myUtils = this;
    return myUtils.findGroupsID(user).then(function(normalGroups) {
      return Group.findAll({
        where: {
          $or: [
            {
              $and: [
                {
                  access_level: ['protect']
                }, {
                  id: normalGroups
                }
              ]
            }, {
              access_level: ['public']
            }
          ]
        },
        include: include
      });
    });
  };

  exports.findGroup = function(user, groupID, include) {
    var Group, myUtils;
    Group = global.db.models.group;
    myUtils = this;
    return myUtils.findGroupsID(user).then(function(normalGroups) {
      return Group.find({
        where: {
          $and: [
            {
              id: groupID
            }, {
              $or: [
                {
                  $and: [
                    {
                      access_level: ['protect']
                    }, {
                      id: normalGroups
                    }
                  ]
                }, {
                  access_level: ['public']
                }
              ]
            }
          ]
        },
        include: include
      });
    });
  };

  exports.getGroupPeopleCount = function(groups) {
    var Membership, group, options;
    if (!(groups instanceof Array)) {
      groups = [groups];
    }
    Membership = global.db.models.membership;
    options = {
      where: {
        group_id: (function() {
          var j, len, results1;
          results1 = [];
          for (j = 0, len = groups.length; j < len; j++) {
            group = groups[j];
            results1.push(group.id);
          }
          return results1;
        })(),
        access_level: ['member', 'admin', 'owner']
      },
      group: 'group_id',
      distinct: true,
      attributes: ['group_id'],
      plain: false
    };
    return Membership.aggregate('user_id', 'count', options);
  };

  exports.addGroupsCountKey = function(counts, currentGroups, key) {
    var j, k, len, len1, p, results1, tmp;
    tmp = {};
    for (j = 0, len = counts.length; j < len; j++) {
      p = counts[j];
      tmp[p.group_id] = p.count;
    }
    results1 = [];
    for (k = 0, len1 = currentGroups.length; k < len1; k++) {
      p = currentGroups[k];
      p[key] = 0;
      if (tmp[p.id]) {
        results1.push(p[key] = tmp[p.id]);
      } else {
        results1.push(void 0);
      }
    }
    return results1;
  };

  exports.findProblemsID = function(normalGroups) {
    var Problem;
    if (normalGroups == null) {
      normalGroups = [];
    }
    Problem = global.db.models.problem;
    return Problem.findAll({
      where: {
        $or: [
          {
            access_level: 'public'
          }, {
            access_level: 'protect',
            group_id: normalGroups
          }
        ]
      },
      attributes: ['id']
    }).then(function(problems) {
      var problem;
      return (function() {
        var j, len, results1;
        results1 = [];
        for (j = 0, len = problems.length; j < len; j++) {
          problem = problems[j];
          results1.push(problem.id);
        }
        return results1;
      })();
    });
  };

  exports.findProblems = function(user, include) {
    var Problem, myUtils;
    Problem = global.db.models.problem;
    myUtils = this;
    return myUtils.findGroupsID(user).then(function(normalGroups) {
      return Problem.findAll({
        where: {
          $or: [
            {
              access_level: 'public'
            }, {
              access_level: 'protect',
              group_id: normalGroups
            }
          ]
        },
        include: include
      });
    });
  };

  exports.findAndCountProblems = function(user, opt, include) {
    var Problem, myUtils;
    Problem = global.db.models.problem;
    myUtils = this;
    return myUtils.findGroupsID(user).then(function(normalGroups) {
      var where;
      where = {
        $and: [
          {
            $or: [
              {
                access_level: 'public'
              }, {
                access_level: 'protect',
                group_id: normalGroups
              }
            ]
          }
        ]
      };
      if (opt.problem_id) {
        where.$and.push({
          id: opt.problem_id
        });
      }
      if (opt.problem_title) {
        where.$and.push({
          title: {
            like: "%" + opt.problem_title + "%"
          }
        });
      }
      if (opt.problem_creator) {
        (function(include) {
          var j, len, model;
          if (include == null) {
            include = {};
          }
          for (j = 0, len = include.length; j < len; j++) {
            model = include[j];
            if (model.as === 'creator') {
              if (model.where == null) {
                model.where = {};
              }
              model.where.nickname = {
                like: "%" + opt.problem_creator + "%"
              };
              return;
            }
          }
          return include.push({
            model: User,
            as: 'creator',
            where: {
              nickname: {
                like: "%" + opt.problem_creator + "%"
              }
            }
          });
        })(include);
      }
      return Problem.findAndCountAll({
        where: where,
        include: include,
        offset: opt.offset,
        limit: global.config.pageLimit.problem,
        distinct: opt.distinct
      });
    });
  };

  exports.findProblem = function(user, problemID, include) {
    var Membership, Problem, currentProblem;
    Problem = global.db.models.problem;
    Membership = global.db.models.membership;
    currentProblem = void 0;
    return global.db.Promise.resolve().then(function() {
      return Problem.find({
        where: {
          id: problemID
        },
        include: include
      });
    }).then(function(problem) {
      var privilege;
      currentProblem = problem;
      if (!problem) {
        return true;
      }
      if (problem.access_level === 'public') {
        return true;
      }
      if (!user) {
        return false;
      }
      privilege = ['admin', 'owner'];
      if (problem.access_level === 'protect') {
        privilege.push('member');
      }
      return Membership.find({
        where: {
          group_id: currentProblem.group_id,
          user_id: user.id,
          access_level: privilege
        }
      });
    }).then(function(flag) {
      if (flag) {
        return currentProblem;
      }
    });
  };

  exports.getResultPeopleCount = function(problems_id, results, contest) {
    var Submission, options;
    Submission = global.db.models.submission;
    options = {
      where: {
        problem_id: problems_id
      },
      group: 'problem_id',
      distinct: true,
      attributes: ['problem_id'],
      plain: false
    };
    if (results) {
      options.where.result = results;
    }
    if (contest) {
      options.where.contest_id = contest.id;
    }
    return Submission.aggregate('creator_id', 'count', options);
  };

  exports.getResultCount = function(problems_id, results, contest) {
    var Submission, options;
    Submission = global.db.models.submission;
    options = {
      where: {
        problem_id: problems_id
      },
      group: 'problem_id',
      distinct: true,
      attributes: ['problem_id'],
      plain: false
    };
    if (results) {
      options.where.result = results;
    }
    if (contest) {
      options.where.contest_id = contest.id;
    }
    return Submission.aggregate('id', 'count', options);
  };

  exports.getRankCount = function() {
    var myUtils;
    myUtils = this;
    myUtils.buildRankCount();
    return global.redis.get("rank_G").then(function(cache) {
      var rank;
      rank = "[]";
      if (cache !== null) {
        rank = cache;
      }
      return rank;
    });
  };

  CACHE_TIMEG = global.config.judge.cache;

  exports.buildRankCount = function() {
    var Basic_rank, Submission, User, getLock, sequelize;
    User = global.db.models.user;
    Submission = global.db.models.submission;
    Basic_rank = global.db.models.basic_rank;
    getLock = void 0;
    sequelize = global.db;
    return global.redis.set("rank_lock_G", new Date(), "NX", "PX", CACHE_TIMEG).then(function(lock) {
      getLock = lock !== null;
      if (!getLock) {
        return [];
      }
      return sequelize.query("select users.id, users.nickname, substring(users.student_id,1,5) as student_id, (count(distinct submissions.problem_id)+basic_ranks.COUNT) as ACOUNT from users,submissions,basic_ranks where users.id = submissions.creator_id and submissions.creator_id = basic_ranks.id and submissions.result ='AC' and users.student_id REGEXP '[0-9]{8}|[A-Z]{2}[0-9]{7}' and users.nickname REGEXP '[u0391-uFFE5]' is not true group by users.id order by ACOUNT desc  limit 10");
    }).spread(function(results, metadata) {
      if (!getLock) {
        return;
      }
      return global.redis.set("rank_G", JSON.stringify(results));
    });
  };

  exports.getSolutionCount = function() {
    var myUtils;
    myUtils = this;
    myUtils.buildSolutionCount();
    return global.redis.get("rank_S").then(function(cache) {
      var rank;
      rank = "[]";
      if (cache !== null) {
        rank = cache;
      }
      return rank;
    });
  };

  CACHE_TIMES = global.config.judge.cache;

  exports.buildSolutionCount = function() {
    var Solution, Submission, User, getLock;
    User = global.db.models.user;
    Submission = global.db.models.submission;
    Solution = global.db.models.solution;
    getLock = void 0;
    return global.redis.set("rank_lock_S", new Date(), "NX", "PX", CACHE_TIMES).then(function(lock) {
      getLock = lock !== null;
      if (!getLock) {
        return [];
      }
      return Submission.findAll({
        attributes: ['creator_id', [global.db.fn('count', global.db.col('solution.id')), 'COUNT']],
        include: [
          {
            model: Solution,
            attributes: []
          }, {
            model: User,
            attributes: [[global.db.fn('substring', global.db.literal('student_id'), global.db.literal('1'), global.db.literal('4')), 'student_id'], 'nickname'],
            as: 'creator',
            where: {
              student_id: global.db.literal('student_id REGEXP "[0-9]{8}|[A-Z]{2}[0-9]{7}"'),
              $and: global.db.literal('nickname REGEXP "[u0391-uFFE5]" is not true')
            }
          }
        ],
        group: ['creator_id'],
        limit: 10,
        order: [[global.db.fn('count', global.db.col('solution.id')), 'DESC']]
      });
    }).then(function(resultsS) {
      if (!getLock) {
        return;
      }
      return global.redis.set("rank_S", JSON.stringify(resultsS));
    });
  };

  exports.getRankCountR = function() {
    var myUtils;
    myUtils = this;
    myUtils.buildRankCountR();
    return global.redis.get("rank_R").then(function(cache) {
      var rank;
      rank = "[]";
      if (cache !== null) {
        rank = cache;
      }
      return rank;
    });
  };

  CACHE_TIMER = global.config.judge.cache;

  exports.buildRankCountR = function() {
    var Submission, User, getLock, sequelize;
    User = global.db.models.user;
    Submission = global.db.models.submission;
    getLock = void 0;
    sequelize = global.db;
    return global.redis.set("rank_lock_R", new Date(), "NX", "PX", CACHE_TIMER).then(function(lock) {
      getLock = lock !== null;
      if (!getLock) {
        return [];
      }
      return sequelize.query("select users.id, users.nickname, substring(users.student_id,1,5) as student_id, (count(distinct submissions.problem_id)) as ACOUNT from users,submissions,basic_ranks where users.id = submissions.creator_id and submissions.creator_id = basic_ranks.id and submissions.result = 'AC' and users.student_id REGEXP '[0-9]{8}|[A-Z]{2}[0-9]{7}' and users.nickname REGEXP '[u0391-uFFE5]' is not true and date(submissions.created_at)>=DATE_SUB(CURDATE(), INTERVAL 30 DAY) group by users.id order by ACOUNT desc  limit 10");
    }).spread(function(resultsR, metadata) {
      if (!getLock) {
        return;
      }
      return global.redis.set("rank_R", JSON.stringify(resultsR));
    });
  };

  exports.getSolutionCountR = function() {
    var myUtils;
    myUtils = this;
    myUtils.buildSolutionCountR();
    return global.redis.get("rank_SR").then(function(cache) {
      var rank;
      rank = "[]";
      if (cache !== null) {
        rank = cache;
      }
      return rank;
    });
  };

  CACHE_TIMESR = global.config.judge.cache;

  exports.buildSolutionCountR = function() {
    var Solution, Submission, User, getLock;
    User = global.db.models.user;
    Submission = global.db.models.submission;
    Solution = global.db.models.solution;
    getLock = void 0;
    return global.redis.set("rank_lock_SR", new Date(), "NX", "PX", CACHE_TIMESR).then(function(lock) {
      getLock = lock !== null;
      if (!getLock) {
        return [];
      }
      return Submission.findAll({
        attributes: ['creator_id', [global.db.fn('count', global.db.col('solution.id')), 'COUNT']],
        include: [
          {
            model: Solution,
            attributes: []
          }, {
            model: User,
            attributes: [[global.db.fn('substring', global.db.literal('student_id'), global.db.literal('1'), global.db.literal('4')), 'student_id'], 'nickname'],
            as: 'creator',
            where: {
              student_id: global.db.literal('student_id REGEXP "[0-9]{8}|[A-Z]{2}[0-9]{7}"'),
              $and: global.db.literal('nickname REGEXP "[u0391-uFFE5]" is not true')
            }
          }
        ],
        where: {
          created_at: {
            $gte: global.db.fn('DATE_SUB', global.db.literal('NOW()'), global.db.literal('INTERVAL 1 MONTH'))
          }
        },
        group: ['creator_id'],
        limit: 10,
        order: [[global.db.fn('count', global.db.col('solution.id')), 'DESC']]
      });
    }).then(function(resultsSR) {
      if (!getLock) {
        return;
      }
      return global.redis.set("rank_SR", JSON.stringify(resultsSR));
    });
  };

  exports.ChampionRank = function() {
    var Submission, User;
    Submission = global.db.models.submission;
    User = global.db.models.user;
    return Submission.findAll({
      attributes: ['creator_id', [global.db.fn('count', global.db.literal('distinct submission.problem_id')), 'COUNT']],
      include: [
        {
          model: User,
          attributes: ['student_id', 'nickname'],
          as: 'creator',
          where: {
            student_id: global.db.literal('student_id REGEXP "[0-9]{8}|[A-Z]{2}[0-9]{7}"'),
            $and: global.db.literal('nickname REGEXP "[u0391-uFFE5]" is not true')
          }
        }
      ],
      where: {
        updated_at: {
          $between: ['2019-02-01 00:00:00', '2019-03-01 00:00:00']
        }
      },
      group: [global.db.literal('creator_id')],
      order: [[global.db.fn('count', global.db.literal('distinct submission.problem_id')), 'DESC']],
      limit: 3
    });
  };

  exports.ShishiRankCount = function() {
    var Submission, User;
    User = global.db.models.user;
    Submission = global.db.models.submission;
    return Submission.findAll({
      attributes: ['creator_id', [global.db.fn('count', global.db.literal('distinct submission.problem_id')), 'COUNT']],
      include: [
        {
          model: User,
          attributes: ['student_id', 'nickname'],
          as: 'creator',
          where: {
            student_id: {
              $ne: ''
            }
          }
        }
      ],
      where: {
        result: 'AC'
      },
      group: ['creator_id'],
      order: [[global.db.fn('count', global.db.literal('distinct submission.problem_id')), 'DESC']],
      limit: 10
    });
  };

  exports.ShishiSolutionCount = function() {
    var Solution, Submission, User;
    User = global.db.models.user;
    Submission = global.db.models.submission;
    Solution = global.db.models.solution;
    return Submission.findAll({
      attributes: ['creator_id', [global.db.fn('count', global.db.col('solution.id')), 'COUNT']],
      include: [
        {
          model: Solution,
          attributes: []
        }, {
          model: User,
          attributes: ['student_id', 'nickname'],
          as: 'creator',
          where: {
            student_id: global.db.literal('student_id REGEXP "[0-9]{8}|[A-Z]{2}[0-9]{7}"'),
            $and: global.db.literal('nickname REGEXP "[u0391-uFFE5]" is not true')
          }
        }
      ],
      where: {
        created_at: {
          $lte: '2017-12-18 00:00:00'
        }
      },
      group: ['creator_id'],
      limit: 10,
      order: [[global.db.fn('count', global.db.col('solution.id')), 'DESC']]
    });
  };

  exports.AllPeople = function() {
    var User;
    User = global.db.models.user;
    return User.findAll({
      attributes: [[global.db.fn('count', global.db.literal('distinct user.id')), 'PCOUNT']],
      where: {
        student_id: {
          $ne: ''
        }
      }
    });
  };

  exports.UserAccpectedProblem = function(userid) {
    var myUtils;
    myUtils = this;
    myUtils.buildUserAccpectedProblem(userid);
    return global.redis.get("rank_T" + userid).then(function(cache) {
      var rank;
      rank = "[]";
      if (cache !== null) {
        rank = cache;
      }
      return rank;
    });
  };

  CACHE_TIMET = global.config.judge.cache;

  exports.buildUserAccpectedProblem = function(userid) {
    var Problem, Solution, Submission, getLock;
    Problem = global.db.models.problem;
    Submission = global.db.models.submission;
    Solution = global.db.models.solution;
    getLock = void 0;
    return global.redis.set("rank_lock_T" + userid, new Date(), "NX", "PX", CACHE_TIMET).then(function(lock) {
      getLock = lock !== null;
      if (!getLock) {
        return [];
      }
      return Problem.findAll({
        attributes: ['id', 'title'],
        include: [
          {
            model: Submission,
            attributes: ['id'],
            where: {
              result: 'AC',
              creator_id: userid
            },
            include: [
              {
                model: Solution
              }
            ]
          }
        ],
        order: [['id', 'DESC']],
        limit: 7
      });
    }).then(function(results) {
      if (!getLock) {
        return;
      }
      return global.redis.set("rank_T" + userid, JSON.stringify(results));
    });
  };

  exports.hasResult = function(user, problems_id, results, contest) {
    return global.db.Promise.resolve().then(function() {
      var Submission, options;
      if (!user) {
        return [];
      }
      Submission = global.db.models.submission;
      options = {
        where: {
          problem_id: problems_id,
          creator_id: user.id
        },
        group: 'problem_id',
        distinct: true,
        attributes: ['problem_id'],
        plain: false
      };
      if (results) {
        options.where.result = results;
      }
      if (contest) {
        options.where.contest_id = contest.id;
      }
      return Submission.aggregate('creator_id', 'count', options);
    });
  };

  exports.addProblemsCountKey = function(counts, currentProblems, key) {
    var j, k, len, len1, p, results1, tmp;
    tmp = {};
    for (j = 0, len = counts.length; j < len; j++) {
      p = counts[j];
      tmp[p.problem_id] = p.count;
    }
    results1 = [];
    for (k = 0, len1 = currentProblems.length; k < len1; k++) {
      p = currentProblems[k];
      p[key] = 0;
      if (tmp[p.id]) {
        results1.push(p[key] = tmp[p.id]);
      } else {
        results1.push(void 0);
      }
    }
    return results1;
  };

  exports.getProblemsStatus = function(currentProblems, currentUser, currentContest) {
    var myUtils, problem, problems_id;
    myUtils = this;
    if (!(currentProblems instanceof Array)) {
      currentProblems = [currentProblems];
    }
    problems_id = (function() {
      var j, len, results1;
      results1 = [];
      for (j = 0, len = currentProblems.length; j < len; j++) {
        problem = currentProblems[j];
        results1.push(problem.id);
      }
      return results1;
    })();
    return global.db.Promise.all([
      myUtils.getResultPeopleCount(problems_id, 'AC', currentContest).then(function(counts) {
        return myUtils.addProblemsCountKey(counts, currentProblems, 'acceptedPeopleCount');
      }), myUtils.getResultPeopleCount(problems_id, void 0, currentContest).then(function(counts) {
        return myUtils.addProblemsCountKey(counts, currentProblems, 'triedPeopleCount');
      }), myUtils.hasResult(currentUser, problems_id, 'AC', currentContest).then(function(counts) {
        return myUtils.addProblemsCountKey(counts, currentProblems, 'accepted');
      }), myUtils.hasResult(currentUser, problems_id, void 0, currentContest).then(function(counts) {
        return myUtils.addProblemsCountKey(counts, currentProblems, 'tried');
      }), myUtils.getResultCount(problems_id, void 0, currentContest).then(function(counts) {
        return myUtils.addProblemsCountKey(counts, currentProblems, 'submissionCount');
      })
    ]);
  };

  exports.getStaticProblem = function(problemId) {
    var dirname;
    dirname = global.config.problem_resource_path;
    return path.join(dirname, problemId.toString());
  };

  exports.findContestsID = function(normalGroups) {
    var Contest;
    if (normalGroups == null) {
      normalGroups = [];
    }
    Contest = global.db.models.contest;
    return Contest.findAll({
      where: {
        $or: [
          {
            access_level: 'public'
          }, {
            access_level: 'protect',
            group_id: normalGroups
          }
        ]
      },
      attributes: ['id']
    }).then(function(contests) {
      var contest;
      return (function() {
        var j, len, results1;
        results1 = [];
        for (j = 0, len = contests.length; j < len; j++) {
          contest = contests[j];
          results1.push(contest.id);
        }
        return results1;
      })();
    });
  };

  exports.findContests = function(user, include) {
    var Contest, myUtils;
    Contest = global.db.models.contest;
    myUtils = this;
    return myUtils.findGroupsID(user).then(function(normalGroups) {
      return Contest.findAll({
        where: {
          $or: [
            {
              access_level: 'public'
            }, {
              access_level: 'protect',
              group_id: normalGroups
            }
          ]
        },
        include: include,
        order: [['start_time', 'DESC'], ['id', 'DESC']]
      });
    });
  };

  exports.findAndCountContests = function(user, offset, include) {
    var Contest, myUtils;
    Contest = global.db.models.contest;
    myUtils = this;
    return myUtils.findGroupsID(user).then(function(normalGroups) {
      return Contest.findAndCountAll({
        where: {
          $or: [
            {
              access_level: 'public'
            }, {
              access_level: 'protect',
              group_id: normalGroups
            }
          ]
        },
        include: include,
        order: [['start_time', 'DESC'], ['id', 'DESC']],
        offset: offset,
        limit: global.config.pageLimit.contest
      });
    });
  };

  exports.findContest = function(user, contestID, include) {
    var Contest, Membership, currentContest;
    Contest = global.db.models.contest;
    Membership = global.db.models.membership;
    currentContest = void 0;
    return global.db.Promise.resolve().then(function() {
      return Contest.find({
        where: {
          id: contestID
        },
        include: include
      });
    }).then(function(contest) {
      currentContest = contest;
      if (!contest) {
        return true;
      }
      if (contest.access_level === 'public') {
        return true;
      }
      if (!user) {
        return false;
      }
      return Membership.find({
        where: {
          group_id: contest.group_id,
          user_id: user.id,
          access_level: ['member', 'admin', 'owner']
        }
      });
    }).then(function(flag) {
      if (flag) {
        return currentContest;
      }
    });
  };

  exports.lettersToNumber = function(word) {
    var i, j, len, res;
    res = 0;
    for (j = 0, len = word.length; j < len; j++) {
      i = word[j];
      res = res * 26 + (i.charCodeAt(0) - 65);
    }
    return res;
  };

  exports.numberToLetters = function(num) {
    var res;
    if (num === 0) {
      return 'A';
    }
    res = "";
    while (num > 0) {
      res = String.fromCharCode(num % 26 + 65) + res;
      num = parseInt(num / 26);
    }
    return res;
  };

  exports.getRank = function(contest) {
    var dicProblemIDToOrder, dicProblemOrderToScore, i, j, len, myUtils, p, ref;
    myUtils = this;
    dicProblemIDToOrder = {};
    dicProblemOrderToScore = {};
    ref = contest.problems;
    for (i = j = 0, len = ref.length; j < len; i = ++j) {
      p = ref[i];
      dicProblemIDToOrder[p.id] = myUtils.numberToLetters(i);
      dicProblemOrderToScore[dicProblemIDToOrder[p.id]] = p.contest_problem_list.score;
    }
    myUtils.buildRank(contest, dicProblemIDToOrder, dicProblemOrderToScore);
    return global.redis.get("rank_" + contest.id).then(function(cache) {
      var rank;
      rank = "[]";
      if (cache !== null) {
        rank = cache;
      }
      return rank;
    });
  };

  PER_PENALTY = global.config.judge.penalty;

  CACHE_TIME = global.config.judge.cache;

  exports.buildRank = function(contest, dicProblemIDToOrder, dicProblemOrderToScore) {
    var User, getLock;
    User = global.db.models.user;
    getLock = void 0;
    return global.redis.set("rank_lock_" + contest.id, new Date(), "NX", "PX", CACHE_TIME).then(function(lock) {
      getLock = lock !== null;
      if (!getLock) {
        return [];
      }
      return contest.getSubmissions({
        include: [
          {
            model: User,
            as: 'creator',
            attributes: ['id', 'nickname', 'student_id', 'school']
          }
        ],
        order: [['created_at', 'ASC'], ['id', 'DESC']]
      });
    }).then(function(submissions) {
      var base, base1, base2, base3, base4, base5, detail, firstB, j, len, name1, p, problem, problemOrderLetter, res, sub, tmp, user;
      if (!getLock) {
        return;
      }
      tmp = {};
      firstB = {};
      for (j = 0, len = submissions.length; j < len; j++) {
        sub = submissions[j];
        if (!sub.creator) {
          continue;
        }
        if (tmp[name1 = sub.creator.id] == null) {
          tmp[name1] = {};
        }
        if ((base = tmp[sub.creator.id]).user == null) {
          base.user = sub.creator;
        }
        if ((base1 = tmp[sub.creator.id]).detail == null) {
          base1.detail = {};
        }
        problemOrderLetter = dicProblemIDToOrder[sub.problem_id];
        if (problemOrderLetter === void 0) {
          continue;
        }
        detail = tmp[sub.creator.id].detail;
        if (detail[problemOrderLetter] == null) {
          detail[problemOrderLetter] = {};
        }
        if ((base2 = detail[problemOrderLetter]).score == null) {
          base2.score = 0;
        }
        if ((base3 = detail[problemOrderLetter]).wrong_count == null) {
          base3.wrong_count = 0;
        }
        if (sub.result === 'AC') {
          if (firstB[problemOrderLetter] == null) {
            firstB[problemOrderLetter] = sub.created_at - contest.start_time;
          }
          if (sub.created_at - contest.start_time < firstB[problemOrderLetter]) {
            firstB[problemOrderLetter] = sub.created_at - contest.start_time;
          }
        }
        if (sub.score > detail[problemOrderLetter].score) {
          detail[problemOrderLetter].score = sub.score;
          if (detail[problemOrderLetter].result !== 'AC') {
            detail[problemOrderLetter].result = sub.result;
          }
          detail[problemOrderLetter].accepted_time = sub.created_at - contest.start_time;
        }
        if (detail[problemOrderLetter].result !== 'AC' && sub.result !== 'CE') {
          ++detail[problemOrderLetter].wrong_count;
        }
      }
      for (user in tmp) {
        if ((base4 = tmp[user]).score == null) {
          base4.score = 0;
        }
        if ((base5 = tmp[user]).penalty == null) {
          base5.penalty = 0;
        }
        for (p in tmp[user].detail) {
          problem = tmp[user].detail[p];
          problem.score *= dicProblemOrderToScore[p];
          tmp[user].score += problem.score;
          if (problem.result === 'AC' && problem.accepted_time === firstB[p]) {
            problem.first_blood = true;
          }
          if (problem.score > 0) {
            tmp[user].penalty += problem.accepted_time + problem.wrong_count * PER_PENALTY;
          }
        }
      }
      res = (function() {
        var results1;
        results1 = [];
        for (user in tmp) {
          results1.push(tmp[user]);
        }
        return results1;
      })();
      res.sort(function(a, b) {
        if (a.score < b.score) {
          return 1;
        }
        if (a.score === b.score && a.penalty > b.penalty) {
          return 1;
        }
        if (a.score === b.score && a.penalty === b.penalty && a.user.id > b.user.id) {
          return 1;
        }
        return -1;
      });
      return global.redis.set("rank_" + contest.id, JSON.stringify(res));
    });
  };

  exports.createSubmissionTransaction = function(form, form_code, problem, user) {
    var Submission, Submission_Code, current_submission;
    if (form_code.content.length > global.config.judge.max_code_length) {
      throw new global.myErrors.UnknownProblem("Your code is too long.");
    }
    Submission = global.db.models.submission;
    Submission_Code = global.db.models.submission_code;
    current_submission = void 0;
    return global.db.transaction(function(t) {
      return Submission.create(form, {
        transaction: t
      }).then(function(submission) {
        current_submission = submission;
        return Submission_Code.create(form_code, {
          transaction: t
        });
      }).then(function(code) {
        return global.db.Promise.all([
          current_submission.setSubmission_code(code, {
            transaction: t
          }), user.addSubmission(current_submission, {
            transaction: t
          }), problem.addSubmission(current_submission, {
            transaction: t
          })
        ]);
      });
    }).then(function() {
      return current_submission;
    });
  };

  exports.findSubmissions = function(user, opt, include) {
    var Submission, myUtils, normalGroups, normalProblems;
    Submission = global.db.models.submission;
    normalGroups = void 0;
    normalProblems = void 0;
    myUtils = this;
    return global.db.Promise.resolve().then(function() {
      return myUtils.findGroupsID(user);
    }).then(function(groups) {
      normalGroups = groups;
      return myUtils.findProblemsID(normalGroups);
    }).then(function(problems) {
      normalProblems = problems;
      return myUtils.findContestsID(normalGroups);
    }).then(function(normalContests) {
      var where;
      where = {
        $and: [
          {
            $or: [
              {
                problem_id: normalProblems
              }, {
                contest_id: normalContests
              }
            ]
          }
        ]
      };
      if (opt.problem_id !== void 0) {
        where.$and.push({
          problem_id: opt.problem_id
        });
      }
      if (opt.contest_id !== void 0) {
        where.$and.push({
          contest_id: opt.contest_id
        });
        if (opt.contest_id !== null) {
          if (user) {
            where.$and.push({
              creator_id: user.id
            });
          } else {
            where.$and.push({
              creator_id: null
            });
          }
        }
      }
      if (opt.language !== void 0) {
        where.$and.push({
          lang: opt.language
        });
      }
      if (opt.result !== void 0) {
        where.$and.push({
          result: opt.result
        });
      }
      if (opt.creator_id !== void 0) {
        where.$and.push({
          creator_id: opt.creator_id
        });
      }
      if (opt.nickname !== void 0) {
        (function(include) {
          var j, len, model;
          if (include == null) {
            include = {};
          }
          for (j = 0, len = include.length; j < len; j++) {
            model = include[j];
            if (model.as === 'creator') {
              if (model.where == null) {
                model.where = {};
              }
              model.where.nickname = opt.nickname;
              return;
            }
          }
          return include.push({
            model: User,
            as: 'creator',
            where: {
              nickname: opt.nickname
            }
          });
        })(include);
      }
      if (opt.offset == null) {
        opt.offset = 0;
      }
      return Submission.findAll({
        where: where,
        include: include,
        order: [['created_at', 'DESC'], ['id', 'DESC']],
        offset: opt.offset,
        limit: global.config.pageLimit.submission
      });
    });
  };

  exports.findSubmission = function(user, submissionID, include) {
    var Submission;
    Submission = global.db.models.submission;
    return Submission.find({
      where: {
        id: submissionID,
        creator_id: (user ? user.id : null)
      },
      include: include
    });
  };

  exports.findSubmissionsInIDs = function(user, submission_id, include) {
    var Submission, myUtils, normalGroups, normalProblems;
    Submission = global.db.models.submission;
    normalGroups = void 0;
    normalProblems = void 0;
    myUtils = this;
    return global.db.Promise.resolve().then(function() {
      return myUtils.findGroupsID(user);
    }).then(function(groups) {
      normalGroups = groups;
      return myUtils.findProblemsID(normalGroups);
    }).then(function(problems) {
      normalProblems = problems;
      return myUtils.findContestsID(normalGroups);
    }).then(function(normalContests) {
      return Submission.findAll({
        where: {
          id: submission_id,
          $or: [
            {
              problem_id: normalProblems
            }, {
              contest_id: normalContests
            }
          ]
        },
        include: include
      });
    }).then(function(submissions) {
      var sub;
      return (function() {
        var j, len, results1;
        results1 = [];
        for (j = 0, len = submissions.length; j < len; j++) {
          sub = submissions[j];
          results1.push(sub.get({
            plain: true
          }));
        }
        return results1;
      })();
    });
  };

  exports.findIssues = function(user, contestID, include) {
    var Issue;
    Issue = global.db.models.issue;
    return global.db.Promise.resolve().then(function() {
      return Issue.findAll({
        where: {
          contest_id: contestID,
          $or: [
            {
              access_level: 'public'
            }, {
              $and: [
                {
                  access_level: 'protect',
                  creator_id: (user ? user.id : null)
                }
              ]
            }
          ]
        },
        order: [['created_at', 'DESC'], ['id', 'DESC']],
        include: include
      });
    });
  };

  exports.findRecommendations = function(user) {
    var User;
    User = global.db.models.user;
    return global.db.Promise.resolve().then(function() {
      if (user) {
        return User.find(user.id);
      }
    }).then(function(user) {
      return user.getProblems();
    }).then(function(problems) {});
  };

  exports.findAllProblem_tag = function(problems_id) {
    var Problem, Problem_tag, Tag;
    Problem_tag = global.db.models.problem_tag;
    Tag = global.db.models.tag;
    Problem = global.db.models.problem;
    return Problem.find({
      where: {
        id: problems_id
      },
      include: [
        {
          model: Tag
        }
      ]
    }).then(function(problem) {
      return problem.tags;
    });
  };

  exports.findTag = function(contents) {
    var Tag;
    Tag = global.db.models.tag;
    return Tag.find({
      where: {
        content: contents
      }
    });
  };

  exports.findProblem_tag = function(problems_id, contents) {
    var Problem, Problem_tag, Tag;
    Problem_tag = global.db.models.problem_tag;
    Tag = global.db.models.tag;
    Problem = global.db.models.problem;
    return Problem.find({
      where: {
        id: problems_id
      },
      include: [
        {
          model: Tag,
          where: {
            content: contents
          }
        }
      ]
    });
  };

  exports.createTag = function(contents) {
    var Tag, current_tags;
    Tag = global.db.models.tag;
    current_tags = void 0;
    return global.db.transaction(function(t) {
      return Tag.create({
        content: contents,
        transaction: t
      }).then(function(tags) {
        return current_tags = tags;
      });
    }).then(function() {
      return current_tags;
    });
  };

  exports.createProblem_tag = function(contents, problems_id, weights) {
    var Problem_tag, current_problems_tag;
    Problem_tag = global.db.models.problem_tag;
    current_problems_tag = void 0;
    return global.db.transaction(function(t) {
      return global.myUtils.findTag(contents).then(function(tags) {
        return Problem_tag.create({
          tag_id: tags.id,
          problem_id: problems_id,
          weight: weights,
          transaction: t
        }).then(function(problems_tag) {
          return current_problems_tag = problems_tag;
        });
      });
    }).then(function() {
      return current_problems_tag;
    });
  };

  exports.createProblem_tagS = function(content, problem_id, weight) {
    var Problem_tag, current_problems_tag;
    Problem_tag = global.db.models.problem_tag;
    current_problems_tag = void 0;
    return global.db.transaction(function(t) {
      return global.myUtils.findProblem_tag(problem_id, content).then(function(ifExit) {
        if (!ifExit) {
          return global.myUtils.findTag(content).then(function(iftags) {
            if (!iftags) {
              global.myUtils.createTag(content);
              return global.myUtils.findTag(content).then(function(tags) {
                return Problem_tag.create({
                  tag_id: tags.id,
                  problem_id: problem_id,
                  weight: weight,
                  transaction: t
                }).then(function(problems_tag) {
                  return current_problems_tag = problems_tag;
                });
              });
            } else {
              return global.myUtils.findTag(content).then(function(tags) {
                return Problem_tag.create({
                  tag_id: tags.id,
                  problem_id: problem_id,
                  weight: weight,
                  transaction: t
                }).then(function(problems_tag) {
                  return current_problems_tag = problems_tag;
                });
              });
            }
          });
        } else {
          return global.myUtils.findTag(content).then(function(tags) {
            return Problem_tag.find({
              where: {
                tag_id: tags.id,
                problem_id: problem_id
              }
            }).then(function(problems_tag) {
              problems_tag.weight = weight;
              return problems_tag.save();
            }).then(function(problems_tag) {
              return current_problems_tag = problems_tag;
            });
          });
        }
      });
    }).then(function() {
      return current_problems_tag;
    });
  };

  exports.createSolution_tag = function(content, solution_id, weight) {
    var Solution_tag, current_solutions_tag;
    Solution_tag = global.db.models.solution_tag;
    current_solutions_tag = void 0;
    return global.db.transaction(function(t) {
      return global.myUtils.findSolution_tag(solution_id, content).then(function(ifExit) {
        if (!ifExit) {
          return global.myUtils.findTag(content).then(function(tags) {
            return Solution_tag.create({
              tag_id: tags.id,
              solution_id: solution_id,
              weight: weight,
              transaction: t
            }).then(function(solutions_tag) {
              return current_solutions_tag = solutions_tag;
            });
          });
        } else {
          return global.myUtils.findTag(content).then(function(tags) {
            return Solution_tag.find({
              where: {
                tag_id: tags.id,
                solution_id: solution_id
              }
            }).then(function(solutions_tag) {
              solutions_tag.weight = weight;
              return solutions_tag.save();
            }).then(function(solutions_tag) {
              return current_solutions_tag = solutions_tag;
            });
          });
        }
      });
    }).then(function() {
      return current_solutions_tag;
    });
  };

  exports.findSolution_tag = function(solution_id, content) {
    var Solution, Solution_tag, Tag;
    Solution_tag = global.db.models.solution_tag;
    Tag = global.db.models.tag;
    Solution = global.db.models.solution;
    return Solution.find({
      where: {
        id: solution_id
      },
      include: [
        {
          model: Tag,
          where: {
            content: content
          }
        }
      ]
    });
  };

  exports.findAllSolution_tag = function(solution_id) {
    var Solution, Solution_tag, Tag;
    Solution_tag = global.db.models.solution_tag;
    Tag = global.db.models.tag;
    Solution = global.db.models.solution;
    return Solution.find({
      where: {
        id: solution_id
      },
      include: [
        {
          model: Tag
        }
      ]
    }).then(function(solution) {
      return solution.tags;
    });
  };

  exports.findProblem_SolutionTags = function(problem_id) {
    var Problem, Solution, SolutionTag, Submission, Tag;
    Problem = global.db.models.problem;
    Submission = global.db.models.submission;
    Solution = global.db.models.solution;
    SolutionTag = global.db.models.solution_tag;
    Tag = global.db.models.tag;
    return Tag.find({
      attributes: ['id'],
      include: [
        {
          model: Solution,
          include: [
            {
              model: Submission,
              where: {
                id: global.db.literal('Solution.submission_id'),
                problem_id: problem_id
              }
            }
          ]
        }
      ],
      group: ['id']
    }).then(function(tag) {
      return tag;
    });
  };

  exports.createSolution_tagS = function(content, solution_id, weight) {
    var Solution_tag, current_solutions_tag;
    Solution_tag = global.db.models.solution_tag;
    current_solutions_tag = void 0;
    return global.db.transaction(function(t) {
      return global.myUtils.findSolution_tag(solution_id, content).then(function(ifExit) {
        if (!ifExit) {
          return global.myUtils.findTag(content).then(function(iftags) {
            if (!iftags) {
              global.myUtils.createTag(content);
              return global.myUtils.findTag(content).then(function(tags) {
                return Solution_tag.create({
                  tag_id: tags.id,
                  solution_id: solution_id,
                  weight: weight,
                  transaction: t
                }).then(function(solutions_tag) {
                  return current_solutions_tag = solutions_tag;
                });
              });
            } else {
              return global.myUtils.findTag(content).then(function(tags) {
                return Solution_tag.create({
                  tag_id: tags.id,
                  solution_id: solution_id,
                  weight: weight,
                  transaction: t
                }).then(function(solutions_tag) {
                  return current_solutions_tag = solutions_tag;
                });
              });
            }
          });
        } else {
          return global.myUtils.findTag(content).then(function(tags) {
            return Solution_tag.find({
              where: {
                tag_id: tags.id,
                solution_id: solution_id
              }
            }).then(function(solutions_tag) {
              solutions_tag.weight = weight;
              return solutions_tag.save();
            }).then(function(solutions_tag) {
              return current_solutions_tag = solutions_tag;
            });
          });
        }
      });
    }).then(function() {
      return current_solutions_tag;
    });
  };

}).call(this);

//# sourceMappingURL=index.js.map
