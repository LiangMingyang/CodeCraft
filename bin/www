#!/usr/bin/env node

/**
 * Module dependencies.
 */


var debug = require('debug')('OJ4TH:server');
var http = require('http');
var cluster = require('cluster');
var cpus = require('os').cpus();
var config = require('../config');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
var exam_port = normalizePort(process.env.PORT || '3001')


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}

if(cluster.isMaster) {
    for(var i = 0 ; i < Math.min(cpus.length, config.cluster) ; ++i) {
        cluster.fork();
        //var worker = cluster.fork();
        //console.log('worker [%d] has been created',
        //    worker.process.pid);
    }

    cluster.on('exit', function (worker, code, signal) {
        console.log('worker [%d] died with code %s and signal %s.',
            worker.process.pid, code , signal);
        var new_worker = cluster.fork();
        console.log('new worker [%d] has been created',
           new_worker.process.pid);
    });

    cluster.on('online', function(worker){
        console.log('worker[%d] is running, pid is [%d].', worker.id, worker.process.pid);
    });

    cluster.on('listening', function (worker, address) {
        console.log('[master] ' + 'listening: worker' + worker.id + ',pid:' + worker.process.pid + ', Address:' + address.address + ":" + address.port);
    });
}
else {
    var app = require('../app');
    app.set('port', port);

    /**
     * Create HTTP server.
     */

    var server = http.createServer(app);
    var exam_server = http.createServer(app);

    /**
     * Listen on provided port, on all network interfaces.
     */

    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);

    exam_server.listen(exam_port);
    exam_server.on('error', onError);
    exam_server.on('listening', onListening);

}