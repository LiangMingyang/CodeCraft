// Generated by CoffeeScript 1.9.3
(function() {
  exports.get = function(req, res) {
    var Group, Problem;
    Group = global.db.models.group;
    Problem = global.db.models.problem;
    return global.db.Promise.resolve().then(function() {
      return global.myUtils.findContest(req.session.user, req.params.contestId, [
        {
          model: Group
        }, {
          model: Problem
        }
      ]);
    }).then(function(contest) {
      if (!contest) {
        throw new global.myError.UnknownContest();
      }
      return res.json(contest.get({
        plain: true
      }));
    })["catch"](function(err) {
      res.json(err);
      return console.log(err);
    });
  };

  exports.getRank = function(req, res) {
    var Problem;
    Problem = global.db.models.problem;
    return global.db.Promise.resolve().then(function() {
      return global.myUtils.findContest(req.session.user, req.params.contestId, [
        {
          model: Problem,
          attributes: ['id']
        }
      ]);
    }).then(function(contest) {
      if (!contest) {
        throw new global.myErrors.UnknownContest();
      }
      if (contest.start_time > (new Date())) {
        throw new global.myErrors.UnknownContest();
      }
      contest.problems.sort(function(a, b) {
        return a.contest_problem_list.order - b.contest_problem_list.order;
      });
      return global.myUtils.getRank(contest);
    }).then(function(rank) {
      return res.json(rank);
    })["catch"](function(err) {
      res.json(err);
      return console.log(err);
    });
  };

  exports.getSubmissions = function(req, res) {
    var Submission;
    Submission = global.db.models.submission;
    return global.db.Promise.resolve().then(function() {
      if (!req.session.user) {
        return [];
      }
      return Submission.findAll({
        where: {
          creator_id: req.session.user.id,
          contest_id: req.params.contestId
        },
        order: [['created_at', 'DESC'], ['id', 'DESC']]
      });
    }).then(function(submissions) {
      var submission;
      return res.json((function() {
        var i, len, results;
        results = [];
        for (i = 0, len = submissions.length; i < len; i++) {
          submission = submissions[i];
          results.push(submission.get({
            plain: true
          }));
        }
        return results;
      })());
    })["catch"](function(err) {
      return console.log(err);
    });
  };

}).call(this);

//# sourceMappingURL=controller.js.map
