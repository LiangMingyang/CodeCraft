// Generated by CoffeeScript 1.10.0
(function() {
  var DB, HOME_PAGE, INDEX_PAGE, LOGIN_PAGE, Utils, checkSolutionAccess;

  INDEX_PAGE = 'index';

  LOGIN_PAGE = 'user/login';

  HOME_PAGE = '/';

  DB = global.db;

  Utils = global.myUtils;

  checkSolutionAccess = function(submission, currentUser) {
    if (!submission) {
      throw new global.myErrors.UnknownSubmission();
    }
    if (submission.creator.id === (currentUser != null ? currentUser.id : void 0)) {
      return;
    }
    if (!submission.solution) {
      throw new global.myErrors.UnknownSubmission();
    }
    if (submission.solution.access_level === 'private') {
      throw new global.myErrors.UnknownSubmission();
    }
    if (submission.solution.access_level === 'protect' && (new Date()) < submission.solution.secret_limit) {
      throw new global.myErrors.UnknownSubmission();
    }
  };

  exports.getSolution = function(req, res) {
    var Contest, Problem, Solution, Submission, SubmissionCode, User, currentUser;
    DB = global.db;
    Utils = global.myUtils;
    User = DB.models.user;
    Submission = DB.models.submission;
    Solution = DB.models.solution;
    SubmissionCode = DB.models.submission_code;
    Problem = DB.models.problem;
    Contest = DB.models.Contest;
    currentUser = void 0;
    return global.db.Promise.resolve().then(function() {
      if (req.session.user) {
        return User.find(req.session.user.id);
      }
    }).then(function(user) {
      currentUser = user;
      return Submission.find({
        where: {
          id: req.params.submissionID
        },
        include: [
          {
            model: SubmissionCode
          }, {
            model: User,
            as: 'creator'
          }, {
            model: Problem
          }, {
            model: Solution
          }
        ]
      });
    }).then(function(submission) {
      checkSolutionAccess(submission, currentUser);
      return res.render('solution/solution', {
        submission: submission,
        user: currentUser,
        editable: submission.creator.id === (currentUser != null ? currentUser.id : void 0)
      });
    })["catch"](global.myErrors.UnknownSubmission, function(err) {
      return res.render('error', {
        error: err
      });
    })["catch"](function(err) {
      console.error(err);
      err.message = "未知错误";
      return res.render('error', {
        error: err
      });
    });
  };

  exports.postSolution = function(req, res) {
    var Solution, User, currentSubmission, currentUser, form;
    DB = global.db;
    Utils = global.myUtils;
    User = DB.models.user;
    Solution = DB.models.solution;
    currentUser = void 0;
    currentSubmission = void 0;
    form = {};
    return global.db.Promise.resolve().then(function() {
      if (req.session.user) {
        return User.find(req.session.user.id);
      }
    }).then(function(user) {
      currentUser = user;
      return Utils.findSubmission(user, req.params.submissionID, [
        {
          model: Solution
        }
      ]);
    }).then(function(submission) {
      if (!submission) {
        throw new global.myErrors.UnknownSubmission();
      }
      currentSubmission = submission;
      form = {
        source: req.body["editor-markdown-doc"],
        content: req.body["editor-html-code"],
        title: req.body["title"] || ("Solution-" + currentUser.nickname + "-" + currentUser.student_id + "-" + currentSubmission.id),
        access_level: req.body["access_level"] || "protect",
        secret_limit: req.body["secret_limit"] || new Date() + 24 * 60 * 601000
      };
      currentSubmission = submission;
      if (submission.solution) {
        submission.solution.source = form.source;
        submission.solution.content = form.content;
        submission.solution.title = form.title;
        return submission.solution.save();
      } else {
        return Solution.create(form).then(function(solution) {
          return currentSubmission.setSolution(solution);
        });
      }
    }).then(function(solution) {
      return res.redirect("" + currentSubmission.id);
    })["catch"](function(err) {
      console.error(err);
      err.message = "未知错误";
      return res.render('error', {
        error: err
      });
    });
  };

}).call(this);

//# sourceMappingURL=controller.js.map
