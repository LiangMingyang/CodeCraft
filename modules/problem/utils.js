// Generated by CoffeeScript 1.9.3
(function() {
  var InvalidAccess, InvalidFile, UnknownProblem, UnknownUser, path,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  path = require('path');

  UnknownProblem = (function(superClass) {
    extend(UnknownProblem, superClass);

    function UnknownProblem(message) {
      this.message = message != null ? message : "Unknown problem";
      this.name = 'UnknownProblem';
      Error.captureStackTrace(this, UnknownProblem);
    }

    return UnknownProblem;

  })(Error);

  InvalidAccess = (function(superClass) {
    extend(InvalidAccess, superClass);

    function InvalidAccess(message) {
      this.message = message != null ? message : "Invalid Access, please return";
      this.name = 'InvalidAccess';
      Error.captureStackTrace(this, InvalidAccess);
    }

    return InvalidAccess;

  })(Error);

  UnknownUser = (function(superClass) {
    extend(UnknownUser, superClass);

    function UnknownUser(message) {
      this.message = message != null ? message : "Unknown user, please login first";
      this.name = 'UnknownUser';
      Error.captureStackTrace(this, UnknownUser);
    }

    return UnknownUser;

  })(Error);

  InvalidFile = (function(superClass) {
    extend(InvalidFile, superClass);

    function InvalidFile(message) {
      this.message = message != null ? message : "File not exist!";
      this.name = 'InvalidFile';
      Error.captureStackTrace(this, InvalidFile);
    }

    return InvalidFile;

  })(Error);

  exports.getStaticProblem = function(problemId) {
    var dirname;
    dirname = global.config.problem_resource_path;
    return path.join(dirname, problemId.toString());
  };

  exports.Error = {
    UnknownUser: UnknownUser,
    InvalidAccess: InvalidAccess,
    UnknownProblem: UnknownProblem,
    InvalidFile: InvalidFile
  };

  exports.findProblems = function(user, include) {
    var Problem;
    Problem = global.db.models.problem;
    return global.db.Promise.resolve().then(function() {
      if (!user) {
        return [];
      }
      return user.getGroups();
    }).then(function(groups) {
      var adminGroups, group, normalGroups;
      normalGroups = (function() {
        var i, len, results1;
        results1 = [];
        for (i = 0, len = groups.length; i < len; i++) {
          group = groups[i];
          if (group.membership.access_level !== 'verifying') {
            results1.push(group.id);
          }
        }
        return results1;
      })();
      adminGroups = (function() {
        var i, len, ref, results1;
        results1 = [];
        for (i = 0, len = groups.length; i < len; i++) {
          group = groups[i];
          if ((ref = group.membership.access_level) === 'owner' || ref === 'admin') {
            results1.push(group.id);
          }
        }
        return results1;
      })();
      return Problem.findAll({
        where: {
          $or: [
            user ? {
              creator_id: user.id
            } : void 0, {
              access_level: 'public'
            }, {
              access_level: 'protect',
              group_id: normalGroups
            }, {
              access_level: 'private',
              group_id: adminGroups
            }
          ]
        },
        include: include
      });
    });
  };

  exports.findProblem = function(user, problemID, include) {
    var Problem;
    Problem = global.db.models.problem;
    return global.db.Promise.resolve().then(function() {
      if (!user) {
        return [];
      }
      return user.getGroups();
    }).then(function(groups) {
      var adminGroups, group, normalGroups;
      normalGroups = (function() {
        var i, len, results1;
        results1 = [];
        for (i = 0, len = groups.length; i < len; i++) {
          group = groups[i];
          if (group.membership.access_level !== 'verifying') {
            results1.push(group.id);
          }
        }
        return results1;
      })();
      adminGroups = (function() {
        var i, len, ref, results1;
        results1 = [];
        for (i = 0, len = groups.length; i < len; i++) {
          group = groups[i];
          if ((ref = group.membership.access_level) === 'owner' || ref === 'admin') {
            results1.push(group.id);
          }
        }
        return results1;
      })();
      return Problem.find({
        where: {
          $and: {
            id: problemID,
            $or: [
              user ? {
                creator_id: user.id
              } : void 0, {
                access_level: 'public'
              }, {
                access_level: 'protect',
                group_id: normalGroups
              }, {
                access_level: 'private',
                group_id: adminGroups
              }
            ]
          }
        },
        include: include
      });
    });
  };

  exports.getResultPeopleCount = function(problems, results, contest) {
    var Submission, options, problem;
    if (!problems instanceof Array) {
      problems = [problems];
    }
    Submission = global.db.models.submission;
    options = {
      where: {
        problem_id: (function() {
          var i, len, results1;
          results1 = [];
          for (i = 0, len = problems.length; i < len; i++) {
            problem = problems[i];
            results1.push(problem.id);
          }
          return results1;
        })()
      },
      group: 'problem_id',
      distinct: true,
      attributes: ['problem_id'],
      plain: false
    };
    if (results) {
      options.where.result = results;
    }
    if (contest) {
      options.where.contest_id = contest.id;
    }
    return Submission.aggregate('creator_id', 'count', options);
  };

  exports.hasResult = function(user, problems, results, contest) {
    var Submission, options, problem;
    if (!user) {
      return [];
    }
    if (!problems instanceof Array) {
      problems = [problems];
    }
    Submission = global.db.models.submission;
    options = {
      where: {
        problem_id: (function() {
          var i, len, results1;
          results1 = [];
          for (i = 0, len = problems.length; i < len; i++) {
            problem = problems[i];
            results1.push(problem.id);
          }
          return results1;
        })()
      },
      group: 'problem_id',
      distinct: true,
      attributes: ['problem_id'],
      plain: false
    };
    if (results) {
      options.where.result = results;
    }
    if (contest) {
      options.where.contest_id = contest.id;
    }
    return Submission.aggregate('creator_id', 'count', options);
  };

}).call(this);

//# sourceMappingURL=utils.js.map
