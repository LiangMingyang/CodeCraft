// Generated by CoffeeScript 1.9.3
(function() {
  var HOME_PAGE, INDEX_PAGE, LOGIN_PAGE, PROBLEM_PAGE, SUBMISSION_PAGE, SUBMIT_PAGE, fs, markdown, path, sequelize;

  sequelize = require('sequelize');

  fs = sequelize.Promise.promisifyAll(require('fs'), {
    suffix: 'Promised'
  });

  path = require('path');

  markdown = require('markdown').markdown;

  HOME_PAGE = '/';

  SUBMISSION_PAGE = 'submission';

  SUBMIT_PAGE = 'submit';

  PROBLEM_PAGE = '..';

  INDEX_PAGE = 'index';

  LOGIN_PAGE = '/user/login';

  exports.getIndex = function(req, res) {
    var Group, User, currentProblem, currentProblems, currentUser;
    User = global.db.models.user;
    Group = global.db.models.group;
    currentProblem = void 0;
    currentUser = void 0;
    currentProblems = void 0;
    return global.db.Promise.resolve().then(function() {
      if (req.session.user) {
        return User.find(req.session.user.id);
      }
    }).then(function(user) {
      currentUser = user;
      return global.myUtils.findProblem(user, req.params.problemID, [
        {
          model: User,
          as: 'creator'
        }, {
          model: Group
        }
      ]);
    }).then(function(problem) {
      if (!problem) {
        throw new global.myErrors.UnknownProblem();
      }
      currentProblem = problem;
      currentProblems = [currentProblem];
      return global.myUtils.getProblemsStatus(currentProblems, currentUser);
    }).then(function() {
      return fs.readFilePromised(path.join(global.myUtils.getStaticProblem(currentProblem.id), 'manifest.json'));
    }).then(function(manifest_str) {
      var manifest;
      manifest = JSON.parse(manifest_str);
      currentProblem.test_setting = manifest.test_setting;
      return fs.readFilePromised(path.join(global.myUtils.getStaticProblem(currentProblem.id), manifest.description));
    }).then(function(description) {
      currentProblem.description = markdown.toHTML(description.toString());
      return res.render('problem/detail', {
        user: req.session.user,
        problem: currentProblem
      });
    })["catch"](global.myErrors.UnknownUser, function(err) {
      req.flash('info', err.message);
      return res.redirect(LOGIN_PAGE);
    })["catch"](global.myErrors.UnknownProblem, function(err) {
      req.flash('info', err.message);
      return res.redirect(PROBLEM_PAGE);
    })["catch"](function(err) {
      console.log(err);
      req.flash('info', 'Unknown error!');
      return res.redirect(HOME_PAGE);
    });
  };

  exports.postSubmission = function(req, res) {
    var User, current_problem, current_submission, current_user;
    User = global.db.models.user;
    current_user = void 0;
    current_submission = void 0;
    current_problem = void 0;
    return global.db.Promise.resolve().then(function() {
      if (req.session.user) {
        return User.find(req.session.user.id);
      }
    }).then(function(user) {
      if (!user) {
        throw new global.myErrors.UnknownUser();
      }
      current_user = user;
      return global.myUtils.findProblem(user, req.params.problemID);
    }).then(function(problem) {
      var form, form_code;
      if (!problem) {
        throw new global.myErrors.UnknownProblem();
      }
      current_problem = problem;
      form = {
        lang: req.body.lang,
        code_length: req.body.code.length
      };
      form_code = {
        content: req.body.code
      };
      return global.myUtils.createSubmissionWithCode(form, form_code);
    }).then(function(submission) {
      current_submission = submission;
      return global.db.Promise.all([current_user.addSubmission(submission), current_problem.addSubmission(submission)]);
    }).then(function() {
      req.flash('info', 'submit code successfully');
      return res.redirect(SUBMISSION_PAGE);
    })["catch"](global.myErrors.UnknownUser, function(err) {
      req.flash('info', err.message);
      return res.redirect(LOGIN_PAGE);
    })["catch"](global.myErrors.UnknownProblem, function(err) {
      req.flash('info', err.message);
      return res.redirect(PROBLEM_PAGE);
    })["catch"](function(err) {
      console.log(err);
      req.flash('info', 'Unknown Error!');
      return res.redirect(HOME_PAGE);
    });
  };

  exports.getSubmissions = function(req, res) {
    var User, currentProblem, currentProblems, currentUser;
    User = global.db.models.user;
    currentProblem = void 0;
    currentUser = void 0;
    currentProblems = void 0;
    return global.db.Promise.resolve().then(function() {
      if (req.session.user) {
        return User.find(req.session.user.id);
      }
    }).then(function(user) {
      currentUser = user;
      return global.myUtils.findProblem(user, req.params.problemID);
    }).then(function(problem) {
      if (!problem) {
        throw new global.myErrors.UnknownProblem();
      }
      currentProblem = problem;
      currentProblems = [problem];
      return global.myUtils.getProblemsStatus(currentProblems, currentUser);
    }).then(function() {
      return fs.readFilePromised(path.join(global.myUtils.getStaticProblem(currentProblem.id), 'manifest.json'));
    }).then(function(manifest_str) {
      var manifest;
      manifest = JSON.parse(manifest_str);
      currentProblem.test_setting = manifest.test_setting;
      return currentProblem.getSubmissions({
        include: [
          {
            model: User,
            as: 'creator'
          }
        ],
        order: [['created_at', 'DESC'], ['id', 'DESC']],
        where: {
          contest_id: null
        },
        offset: req.query.offset,
        limit: global.config.pageLimit.submission
      });
    }).then(function(submissions) {
      return res.render('problem/submission', {
        submissions: submissions,
        problem: currentProblem,
        user: req.session.user,
        offset: req.query.offset,
        pageLimit: global.config.pageLimit.submission
      });
    })["catch"](global.myErrors.UnknownUser, function(err) {
      req.flash('info', err.message);
      return res.redirect(LOGIN_PAGE);
    })["catch"](global.myErrors.UnknownProblem, function(err) {
      req.flash('info', err.message);
      return res.redirect(PROBLEM_PAGE);
    })["catch"](function(err) {
      console.log(err);
      req.flash('info', 'Unknown error!');
      return res.redirect(HOME_PAGE);
    });
  };

}).call(this);

//# sourceMappingURL=controller.js.map
