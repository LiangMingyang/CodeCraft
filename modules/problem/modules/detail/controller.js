// Generated by CoffeeScript 1.9.2
(function() {
  var GROUP_PAGE, HOME_PAGE, INDEX_PAGE, LOGIN_PAGE, SUBMISSION_PAGE, SUBMIT_PAGE, fs, markdown, myUtils, path;

  myUtils = require('./utils');

  fs = require('fs');

  path = require('path');

  markdown = require('markdown').markdown;

  HOME_PAGE = '/';

  SUBMISSION_PAGE = 'submission';

  SUBMIT_PAGE = 'submit';

  INDEX_PAGE = '.';

  LOGIN_PAGE = '/user/login';

  GROUP_PAGE = '/group/problem';

  exports.getIndex = function(req, res) {
    var Problem;
    Problem = global.db.models.problem;
    console.log(req.params);
    return Problem.find(req.params.problemID).then(function(problem) {
      if (!problem) {
        throw new myUtils.Error.UnknownProblem();
      }
      return fs.readFile(path.join(myUtils.getStaticProblem(problem.id), 'manifest.json'), function(err, manifest_str) {
        var manifest;
        if (err) {
          throw new myUtils.Error.InvalidFile();
        }
        manifest = JSON.parse(manifest_str);
        return fs.readFile(path.join(myUtils.getStaticProblem(problem.id), manifest.description), function(err, description) {
          if (err) {
            throw new myUtils.Error.InvalidFile();
          }
          return res.render('problem/detail', {
            title: 'Problem List Page',
            problem: {
              problem_id: problem.id,
              title: problem.title,
              description: markdown.toHTML(description.toString()),
              test_setting: {
                language: manifest.test_setting.language.split(','),
                time_limit: manifest.test_setting.time_limit,
                memory_limit: manifest.test_setting.memory_limit,
                special_judge: manifest.test_setting.special_judge === null
              }
            }
          });
        });
      });
    })["catch"](myUtils.Error.UnknownProblem, function(err) {
      req.flash('info', 'problem not exist');
      return res.redirect(HOME_PAGE);
    })["catch"](function(err) {
      req.flash('info', err.message);
      return res.redirect(HOME_PAGE);
    });
  };

  exports.postSubmission = function(req, res) {
    var Problem, Submission, Submission_Code, User, current_problem, current_submission, current_user, form, form_code;
    form = {
      lang: req.body.lang
    };
    form_code = {
      content: req.body.code
    };
    Problem = global.db.models.problem;
    Submission = global.db.models.submission;
    Submission_Code = global.db.models.submission_code;
    User = global.db.models.user;
    current_user = void 0;
    current_submission = void 0;
    current_problem = void 0;
    return global.db.Promise.resolve().then(function() {
      return User.find(req.session.user.id);
    }).then(function(user) {
      if (!user) {
        throw new myUtils.Error.UnknownUser();
      }
      current_user = user;
      return Problem.find(req.params.problemID);
    }).then(function(problem) {
      if (!problem) {
        throw new myUtils.Error.UnknownProblem();
      }
      current_problem = problem;
      return Submission.create(form);
    }).then(function(submission) {
      return current_user.addSubmission(submission);
    }).then(function(submission) {
      return current_problem.addSubmission(submission);
    }).then(function(submission) {
      current_submission = submission;
      return Submission_Code.create(form_code);
    }).then(function(code) {
      return current_submission.setSubmission_code(code);
    }).then(function(submission) {
      req.flash('info', 'submit code successfully');
      return res.redirect(SUBMISSION_PAGE);
    })["catch"](myUtils.Error.UnknownUser, function(err) {
      req.flash('info', 'Unknown User');
      return res.redirect(INDEX_PAGE);
    })["catch"](myUtils.Error.UnknownProblem, function(err) {
      req.flash('info', 'problem not exist');
      return res.redirect(HOME_PAGE);
    })["catch"](function(err) {
      req.flash('info', 'Unknown Error!');
      return res.redirect(HOME_PAGE);
    });
  };

  exports.getSubmissions = function(req, res) {
    var Submission, User, form;
    form = {
      problem_id: req.params.problemID
    };
    Submission = global.db.models.submission;
    User = global.db.models.user;
    return Submission.findAll({
      where: form,
      include: [
        {
          model: User
        }
      ]
    }).then(function(submissions) {
      return res.render('problem/submission', {
        title: 'Problem Submission List Page',
        headline: 'Problem index(SHEN ME DOU MEI YOU!)',
        submissions: submissions
      });
    })["catch"](function(err) {
      req.flash('info', err.message);
      return res.redirect(HOME_PAGE);
    });
  };

  exports.getCode = function(req, res) {
    var Submission_Code;
    Submission_Code = global.db.models.submission_code;
    return Submission_Code.find(req.params.submissionID).then(function(code) {
      return res.json({
        code: code.content
      });
    });
  };

}).call(this);

//# sourceMappingURL=controller.js.map
