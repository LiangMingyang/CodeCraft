// Generated by CoffeeScript 1.9.2
(function() {
  var GROUP_PAGE, HOME_PAGE, INDEX_PAGE, LOGIN_PAGE, SUBMISSION_PAGE, SUBMIT_PAGE, myUtils;

  myUtils = require('./utils');

  HOME_PAGE = '/';

  SUBMISSION_PAGE = 'submission';

  SUBMIT_PAGE = 'submit';

  INDEX_PAGE = '.';

  LOGIN_PAGE = '/user/login';

  GROUP_PAGE = '/group/problem';

  exports.getIndex = function(req, res) {
    var Problem;
    Problem = global.db.models.problem;
    return Problem.find(req.param.problemID).then(function(problem) {
      if (!problem) {
        throw new myUtils.UnknownProblem();
      }
      return res.render('problem/detail', {
        title: 'Problem List Page',
        problem: {
          problem_id: problem.id,
          title: problem.title,
          description: '在计算机（软件）技术中，通配符可用于代替字符。\n通常地，星号“*”匹配0个或以上的字符。\n问题来了，输入两个字符串，判断第二个字符串中有没有能够满足第一个字符串的子串。',
          test_setting: {
            input: 'hai mei you zuo',
            output: 'hai mei you zuo',
            time_limit: '2000 ms',
            memory_limit: '64M'
          }
        }
      });
    });
  };

  exports.postSubmission = function(req, res) {
    var Problem, Submission, Submission_Code, User, current_problem, current_submission, current_user, form, form_code;
    form = {
      lang: req.body.lang
    };
    form_code = {
      content: req.body.code
    };
    Problem = global.db.models.problem;
    Submission = global.db.models.submission;
    Submission_Code = global.db.models.submission_code;
    User = global.db.models.user;
    current_user = void 0;
    current_submission = void 0;
    current_problem = void 0;
    return global.db.Promise.resolve().then(function() {
      return User.find(req.session.user.id);
    }).then(function(user) {
      if (!user) {
        throw new myUtils.UnknownUser();
      }
      current_user = user;
      return Problem.find(req.param.problemID);
    }).then(function(problem) {
      if (!problem) {
        throw new myUtils.UnknownProblem();
      }
      current_problem = problem;
      return Submission.create(form);
    }).then(function(submission) {
      return current_user.addSubmission(submission);
    }).then(function(submission) {
      return current_problem.addSubmission(submission);
    }).then(function(submission) {
      current_submission = submission;
      return Submission_Code.create(form_code);
    }).then(function(code) {
      return current_submission.setSubmission_code(code);
    }).then(function(submission) {
      req.flash('info', 'submit code successfully');
      return res.redirect(SUBMISSION_PAGE);
    });
  };

  exports.getSubmissions = function(req, res) {
    var Submission, User, form;
    form = {
      problem_id: req.param.problemID
    };
    Submission = global.db.models.submission;
    User = global.db.models.user;
    return Submission.findAll({
      where: form,
      include: [
        {
          model: User
        }
      ]
    }).then(function(submissions) {
      return res.render('problem/submission', {
        title: 'Problem Submission List Page',
        headline: 'Problem index(SHEN ME DOU MEI YOU!)',
        submissions: submissions
      });
    });
  };

}).call(this);

//# sourceMappingURL=controller.js.map
