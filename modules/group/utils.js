// Generated by CoffeeScript 1.9.3
(function() {
  var UnknownUser,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  UnknownUser = (function(superClass) {
    extend(UnknownUser, superClass);

    function UnknownUser(message) {
      this.message = message != null ? message : "Unknown user, please login first";
      this.name = 'UnknownUser';
      Error.captureStackTrace(this, UnknownUser);
    }

    return UnknownUser;

  })(Error);

  exports.Error = {
    UnknownUser: UnknownUser
  };

  exports.findGroups = function(user, include) {
    var Group;
    Group = global.db.models.group;
    return global.db.Promise.resolve().then(function() {
      if (!user) {
        return [];
      }
      return user.getGroups({
        attributes: ['id']
      });
    }).then(function(groups) {
      var group, normalGroups;
      normalGroups = (function() {
        var i, len, results;
        results = [];
        for (i = 0, len = groups.length; i < len; i++) {
          group = groups[i];
          if (group.membership.access_level !== 'verifying') {
            results.push(group.id);
          }
        }
        return results;
      })();
      return Group.findAll({
        where: {
          $or: [
            {
              access_level: ['public', 'protect']
            }, {
              id: normalGroups
            }
          ]
        },
        include: include
      });
    });
  };

  exports.findGroup = function(user, groupID, include) {
    var Group, currentUser;
    Group = global.db.models.group;
    currentUser = void 0;
    return global.db.Promise.resolve().then(function() {
      if (!user) {
        return [];
      }
      currentUser = user;
      return user.getGroups({
        attributes: ['id']
      });
    }).then(function(groups) {
      var group, normalGroups;
      normalGroups = (function() {
        var i, len, results;
        results = [];
        for (i = 0, len = groups.length; i < len; i++) {
          group = groups[i];
          if (group.membership.access_level !== 'verifying') {
            results.push(group.id);
          }
        }
        return results;
      })();
      return Group.find({
        where: {
          $and: [
            {
              id: groupID
            }, {
              $or: [
                {
                  access_level: ['public', 'protect']
                }, {
                  id: normalGroups
                }
              ]
            }
          ]
        },
        include: include
      });
    });
  };

  exports.getGroupPeopleCount = function(groups) {
    var Membership, group, options;
    if (!groups instanceof Array) {
      groups = [groups];
    }
    Membership = global.db.models.membership;
    options = {
      where: {
        group_id: (function() {
          var i, len, results;
          results = [];
          for (i = 0, len = groups.length; i < len; i++) {
            group = groups[i];
            results.push(group.id);
          }
          return results;
        })()
      },
      group: 'group_id',
      distinct: true,
      attributes: ['group_id'],
      plain: false
    };
    return Membership.aggregate('user_id', 'count', options);
  };

  exports.addGroupCountKey = function(counts, currentGroups, key) {
    var i, j, len, len1, p, results, tmp;
    tmp = {};
    for (i = 0, len = counts.length; i < len; i++) {
      p = counts[i];
      tmp[p.group_id] = p.count;
    }
    results = [];
    for (j = 0, len1 = currentGroups.length; j < len1; j++) {
      p = currentGroups[j];
      p[key] = 0;
      if (tmp[p.id]) {
        results.push(p[key] = tmp[p.id]);
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

}).call(this);

//# sourceMappingURL=utils.js.map
