// Generated by CoffeeScript 1.9.2
(function() {
  var UnknownGroup, UnknownUser,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  UnknownGroup = (function(superClass) {
    extend(UnknownGroup, superClass);

    function UnknownGroup(message) {
      this.message = message != null ? message : "Unknown Group";
      this.name = 'UnknownGroup';
      Error.captureStackTrace(this, UnknownGroup);
    }

    return UnknownGroup;

  })(Error);

  UnknownUser = (function(superClass) {
    extend(UnknownUser, superClass);

    function UnknownUser(message) {
      this.message = message != null ? message : "Unknown user, please login first";
      this.name = 'UnknownUser';
      Error.captureStackTrace(this, UnknownUser);
    }

    return UnknownUser;

  })(Error);

  exports.Error = {
    UnknownGroup: UnknownGroup,
    UnknownUser: UnknownUser
  };

  exports.findGroups = function(req) {
    var Group, User;
    User = global.db.models.user;
    Group = global.db.models.group;
    return global.db.Promise.resolve().then(function() {
      if (!req.session.user) {
        return [];
      }
      return User.find(req.session.user.id).then(function(user) {
        if (!user) {
          throw new UnknownUser();
        }
        return user.getGroups();
      });
    }).then(function(groups) {
      var group, normalGroups;
      normalGroups = (function() {
        var i, len, results;
        results = [];
        for (i = 0, len = groups.length; i < len; i++) {
          group = groups[i];
          if (group.membership.access_level !== 'verifying') {
            results.push(group.id);
          }
        }
        return results;
      })();
      return Group.findAll({
        where: {
          $or: [
            {
              access_level: ['public', 'protect']
            }, {
              id: normalGroups
            }
          ]
        },
        include: [
          {
            model: User,
            as: 'creator'
          }
        ]
      });
    });
  };

  exports.findGroup = function(req, groupID) {
    var Group, User;
    User = global.db.models.user;
    Group = global.db.models.group;
    return global.db.Promise.resolve().then(function() {
      if (!req.session.user) {
        return [];
      }
      return User.find(req.session.user.id).then(function(user) {
        if (!user) {
          throw new UnknownUser();
        }
        return user.getGroups();
      });
    }).then(function(groups) {
      var group, normalGroups;
      normalGroups = (function() {
        var i, len, results;
        results = [];
        for (i = 0, len = groups.length; i < len; i++) {
          group = groups[i];
          if (group.membership.access_level !== 'verifying') {
            results.push(group.id);
          }
        }
        return results;
      })();
      return Group.find({
        where: {
          $and: [
            {
              id: groupID
            }, {
              $or: [
                {
                  access_level: ['public', 'protect']
                }, {
                  id: normalGroups
                }
              ]
            }
          ]
        },
        include: [
          {
            model: User,
            as: 'creator'
          }
        ]
      });
    });
  };

}).call(this);

//# sourceMappingURL=utils.js.map
