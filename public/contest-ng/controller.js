// Generated by CoffeeScript 1.12.6
(function() {
  angular.module('contest', ['contest-factory', 'contest-router']).filter('marked', [
    '$sce', function($sce) {
      return function(text) {
        if (!text) {
          text = "";
        }
        return $sce.trustAsHtml(markdown.toHTML(text));
      };
    }
  ]).filter('penalty', [
    function() {
      return function(date) {
        var hours, minutes, peanlty, penalty, seconds;
        if (!date) {
          return "";
        }
        penalty = new Date(date);
        peanlty = penalty.getTime();
        seconds = (peanlty - peanlty % 1000) / 1000;
        minutes = (seconds - seconds % 60) / 60;
        hours = (minutes - minutes % 60) / 60;
        minutes %= 60;
        if (minutes < 10) {
          minutes = '0' + minutes;
        }
        seconds %= 60;
        if (seconds < 10) {
          seconds = '0' + seconds;
        }
        return hours + ":" + minutes + ":" + seconds;
      };
    }
  ]).filter('wrongCount', [
    function() {
      return function(wrong_count) {
        if (!wrong_count || wrong_count === 0) {
          return "";
        }
        return "(+" + wrong_count + ")";
      };
    }
  ]).filter('result', [
    function() {
      return function(result) {
        var dic;
        dic = {
          AC: "Accepted",
          WA: "Wrong Answer",
          CE: "Compile Error",
          RE: "Runtime Error",
          REG: "Runtime Error (SIGSEGV)",
          REP: "Runtime Error (SIGFPE)",
          WT: "Waiting",
          JG: "Running",
          TLE: "Time Limit Exceed",
          MLE: "Memory Limit Exceed",
          PE: "Presentation Error",
          ERR: "Judge Error",
          IFNR: "Input File Not Ready",
          OFNR: "Output File Not Ready",
          EFNR: "Error File Not Ready",
          OE: "Other Error"
        };
        return dic[result] || "Other Error";
      };
    }
  ]).controller('contest.mainCtrl', function($scope, $routeParams, $http, $timeout, Submission, Contest, Me, Rank, ServerTime, Issue) {
    var question_list;
    $scope.order = Contest.order;
    if ($scope.order == null) {
      $scope.order = 0;
    }
    if ($scope.form == null) {
      $scope.form = {
        lang: 'c++'
      };
    }
    $scope.Me = Me;
    $scope.ServerTime = ServerTime;
    $scope.contestId = $routeParams.contestId;
    Contest.setContestId($routeParams.contestId);
    $scope.Contest = Contest;
    Submission.setContestId($routeParams.contestId);
    $scope.Submission = Submission;
    Rank.setContestId($routeParams.contestId);
    $scope.Rank = Rank;
    Issue.setContestId($routeParams.contestId);
    $scope.Issue = Issue;
    $timeout(function() {
      return MathJax.Hub.Queue(["Typeset", MathJax.Hub]);
    }, 100);
    $scope.setProblem = function(order) {
      Contest.order = order;
      $scope.order = order;
      return $timeout(function() {
        return MathJax.Hub.Queue(["Typeset", MathJax.Hub]);
      }, 100);
    };
    $scope.isProblem = function(order) {
      return $scope.order === order;
    };
    $scope.numberToLetters = function(num) {
      var res;
      if (num === 0) {
        return 'A';
      }
      res = "";
      while (num > 0) {
        res = String.fromCharCode(num % 26 + 65) + res;
        num = parseInt(num / 26);
      }
      return res;
    };
    $scope.submit = function() {
      $scope.form.order = $scope.order;
      if (!$scope.form.code || $scope.form.code.length < 10) {
        alert("代码太短了，拒绝提交");
        return;
      }
      return Submission.submit($scope.form);
    };
    $scope.accepted = function(order) {
      var err, res, sub;
      try {
        res = (function() {
          var i, len, ref, results;
          ref = Submission.data;
          results = [];
          for (i = 0, len = ref.length; i < len; i++) {
            sub = ref[i];
            if ($scope.Contest.idToOrder[sub.problem_id] === order && sub.result === 'AC') {
              results.push(sub);
            }
          }
          return results;
        })();
        return res.length !== 0;
      } catch (error) {
        err = error;
        return false;
      }
    };
    $scope.tried = function(order) {
      var err, res, sub;
      try {
        res = (function() {
          var i, len, ref, results;
          ref = Submission.data;
          results = [];
          for (i = 0, len = ref.length; i < len; i++) {
            sub = ref[i];
            if ($scope.Contest.idToOrder[sub.problem_id] === order) {
              results.push(sub);
            }
          }
          return results;
        })();
        return res.length !== 0;
      } catch (error) {
        err = error;
        return false;
      }
    };
    $scope.change_submission_color = function(submission, index) {
      var color, number;
      color = void 0;
      number = void 0;
      if (submission === "WT" || submission === "JG") {
        color = "green";
      } else if (submission === "AC") {
        color = "blue";
      } else {
        color = "red";
      }
      if (index % 2 === 0) {
        number = "even";
      } else {
        number = "odd";
      }
      return color + "-" + number + "-" + "tr";
    };
    $scope.change_submission_result_color = function(result) {
      switch (result) {
        case "WT":
        case "JG":
          return "green-td";
        case "AC":
          return "blue-td";
        default:
          return "red-td";
      }
    };
    $scope.check_submission_is_running = function(result) {
      return result === "WT" || result === "JG";
    };
    $scope.active = function() {
      Rank.active();
      Contest.active();
      return Issue.active();
    };
    $scope.question_form = {};
    question_list = {};
    $scope.submit_question_form = function() {
      $scope.question_form.order = $scope.order;
      return Issue.create($scope.question_form);
    };
    $scope.is_question = 0;
    $scope.question_title = "提问";
    $scope.show_question_area = function() {
      if ($scope.is_question === 0) {
        $scope.question_title = "收起";
        return $scope.is_question = 1;
      } else {
        $scope.is_question = 0;
        return $scope.question_title = "提问";
      }
    };
    $scope.change_question_list = function(index) {
      return question_list[index] = !!!question_list[index];
    };
    $scope.query_question_list = function(index) {
      return !!question_list[index];
    };
    $scope.question_page = 0;
    $scope.table_tr_title = {
      title: "提问标题",
      nickname: "提问者",
      time: "提问时间",
      problem: "提问题目"
    };
    $scope.change_table_tr_title_to_issue = function() {
      $scope.table_tr_title.title = "公告标题";
      $scope.table_tr_title.nickname = "发布者";
      $scope.table_tr_title.time = "发布公告时间";
      return $scope.table_tr_title.problem = "公告对应题目";
    };
    $scope.change_table_tr_title_to_question = function() {
      $scope.table_tr_title.title = "提问标题";
      $scope.table_tr_title.nickname = "提问者";
      $scope.table_tr_title.time = "提问时间";
      return $scope.table_tr_title.problem = "提问题目";
    };
    return $scope.set_question_page = function(question_page) {
      $scope.question_page = question_page;
      if (question_page === 2) {
        $scope.change_table_tr_title_to_issue();
      }
      if (question_page === 0 || question_page === 1) {
        return $scope.change_table_tr_title_to_question();
      }
    };
  });

}).call(this);

//# sourceMappingURL=controller.js.map
