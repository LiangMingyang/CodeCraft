// Generated by CoffeeScript 1.10.0
(function() {
  var express, middlewares, modules, router;

  express = require('express');

  router = express.Router({
    mergeParams: true
  });

  middlewares = require('../middlewares');

  modules = require('../modules');

  router.use(middlewares);

  router.use('/user', modules.user.router);

  router.use('/group', modules.group.router);

  router.use('/problem', modules.problem.router);

  router.use('/contest', modules.contest.router);

  router.use('/message', modules.message.router);

  router.use('/submission', modules.submission.router);

  router.use('/feedback', modules.feedback.router);

  router.use('/api', modules.api.router);

  router.use('/rank', modules.rank.router);

  router.get('/', function(req, res) {
    return res.redirect('/index');
  });

  router.get('/index', function(req, res) {
    var User, currentUser, recommendation;
    User = global.db.models.user;
    recommendation = void 0;
    currentUser = void 0;
    return global.db.Promise.resolve().then(function() {
      if (req.session.user) {
        return User.find(req.session.user.id);
      }
    }).then(function(user) {
      currentUser = user;
      if (!currentUser) {
        return [];
      }
      return currentUser.getRecommendation();
    }).then(function(recommendation_problems) {
      var problem;
      recommendation = (function() {
        var i, len, results;
        results = [];
        for (i = 0, len = recommendation_problems.length; i < len; i++) {
          problem = recommendation_problems[i];
          results.push(problem.get({
            plain: true
          }));
        }
        return results;
      })();
      return recommendation.sort(function(a, b) {
        return b.recommendation.score - a.recommendation.score;
      });
    }).then(function() {
      var Solution, Submission;
      res.render('index', {
        title: 'OJ4TH',
        user: req.session.user,
        recommendation: recommendation
      });
      Solution = global.db.models.solution;
      Submission = global.db.models.submission;
      return Submission.findAll({
        attributes: ['creator_id', [global.db.fn('count', global.db.col('solution.id')), 'total']],
        include: [
          {
            model: Solution,
            attributes: []
          }
        ],
        group: ['creator_id'],
        limit: 30,
        order: [[global.db.fn('count', global.db.col('solution.id')), 'DESC']]
      }).then(function(res) {
        return console.log(res[0].get({
          plain: true
        }));
      });
    });
  });

  router.get('/notice', function(req, res) {
    return res.render('notice', {
      title: '招聘启事',
      user: req.session.user
    });
  });

  router.get('/notice', function(req, res) {
    return res.render('notice', {
      title: '招聘启事',
      user: req.session.user
    });
  });

  router.get('/bcpc-rating', function(req, res) {
    var teamName;
    teamName = ["TDL", "LovelyDonuts", "ACMakeMeHappier", "null", "sto orz", "QAQ", "ResuscitatedHope", "Veleno", "deticxe", "GG", "firebug", "The South China Sea"];
    return res.render('acm-rating/rating', {
      title: '北航ACM集训队Rating计算',
      teamName: teamName,
      user: req.session.user
    });
  });

  module.exports = router;

}).call(this);

//# sourceMappingURL=index.js.map
